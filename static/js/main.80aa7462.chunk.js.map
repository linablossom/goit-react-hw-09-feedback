{"version":3,"sources":["components/Section.js","components/FeedbackOptions.js","components/Statistics.js","components/Notification.js","App.js","index.js"],"names":["Section","title","children","FeedbackOptions","onLeaveGoodFeedback","onLeaveNeutralFeedback","onLeaveBadFeedback","onClick","Statistics","good","neutral","bad","total","positivePercentage","Notification","message","App","useState","setGood","setNeutral","setBad","countTotalFeedback","percentage","Math","floor","countPositiveFeedbackPercentage","ReactDOM","render","document","getElementById"],"mappings":"6LAiBeA,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCoBQC,EAxBS,SAAC,GAIlB,IAHLC,EAGI,EAHJA,oBACAC,EAEI,EAFJA,uBACAC,EACI,EADJA,mBAEA,OACE,qCACE,wBAAQC,QAAS,kBAAMH,KAAvB,kBACA,wBAAQG,QAAS,kBAAMF,KAAvB,qBACA,wBAAQE,QAAS,kBAAMD,KAAvB,qBCWSE,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,qCACE,uCAAUJ,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,2CAAcC,EAAd,WCCSC,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCgEEC,EA9DH,WACV,MAAwBC,mBAAS,GAAjC,mBAAOR,EAAP,KAAaS,EAAb,KACA,EAA8BD,mBAAS,GAAvC,mBAAOP,EAAP,KAAgBS,EAAhB,KACA,EAAsBF,mBAAS,GAA/B,mBAAON,EAAP,KAAYS,EAAZ,KAoBMC,EAAqB,WACzB,OAAOZ,EAAOC,EAAUC,GASpBC,EAAQS,IACRC,EAPkC,WACtC,IAAMV,EAAQS,IACd,OAAKT,EACEW,KAAKC,MAAOf,EAAOG,EAAS,KADhB,EAKFa,GAEnB,OACE,qCACE,cAAC,EAAD,CAASxB,MAAO,wBAAhB,SACE,cAAC,EAAD,CACEG,oBAnCoB,WAC1Bc,EAAQT,EAAO,IAmCTJ,uBAhCuB,WAC7Bc,EAAWT,EAAU,IAgCfJ,mBA7BmB,WACzBc,EAAOT,EAAM,QA+BX,cAAC,EAAD,CAASV,MAAO,aAAhB,SACIW,EAGA,cAAC,EAAD,CACEH,KAAMA,EACNC,QAASA,EACTC,IAAKA,EACLC,MAAOA,EACPC,mBAAoBS,IAPtB,cAAC,EAAD,CAAcP,QAAS,4BCjDjCW,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.80aa7462.chunk.js","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n\nexport default Section;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FeedbackOptions = ({\n  onLeaveGoodFeedback,\n  onLeaveNeutralFeedback,\n  onLeaveBadFeedback,\n}) => {\n  return (\n    <>\n      <button onClick={() => onLeaveGoodFeedback()}>Good</button>\n      <button onClick={() => onLeaveNeutralFeedback()}>Neutral</button>\n      <button onClick={() => onLeaveBadFeedback()}>Bad</button>\n    </>\n  );\n};\n\nFeedbackOptions.propTypes = {\n  onLeaveGoodFeedback: PropTypes.func.isRequired,\n  onLeaveNeutralFeedback: PropTypes.func.isRequired,\n  onLeaveBadFeedback: PropTypes.func.isRequired,\n};\n\n// FeedbackOptions.propTypes = {\n//   onLeaveFeedback: PropTypes.object.isRequired,\n// };\n\nexport default FeedbackOptions;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return (\n    <>\n      <p>Good: {good}</p>\n      <p>Neutral: {neutral}</p>\n      <p>Bad: {bad}</p>\n      <p>Total: {total}</p>\n      <p>Positive: {positivePercentage}%</p>\n    </>\n  );\n};\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n\nexport default Statistics;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n\nexport default Notification;\n","import React, { useState } from \"react\";\nimport Section from \"./components/Section\";\nimport FeedbackOptions from \"./components/FeedbackOptions\";\nimport Statistics from \"./components/Statistics\";\nimport Notification from \"./components/Notification\";\n\nconst App = () => {\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n  const onLeaveGoodFeedback = () => {\n    setGood(good + 1);\n  };\n\n  const onLeaveNeutralFeedback = () => {\n    setNeutral(neutral + 1);\n  };\n\n  const onLeaveBadFeedback = () => {\n    setBad(bad + 1);\n  };\n\n  // const onLeaveFeedback = {\n  //   onLeaveGoodFeedback,\n  //   onLeaveNeutralFeedback,\n  //   onLeaveBadFeedback,\n  // };\n\n  const countTotalFeedback = () => {\n    return good + neutral + bad;\n  };\n\n  const countPositiveFeedbackPercentage = () => {\n    const total = countTotalFeedback();\n    if (!total) return 0;\n    return Math.floor((good / total) * 100);\n  };\n\n  const total = countTotalFeedback();\n  const percentage = countPositiveFeedbackPercentage();\n\n  return (\n    <>\n      <Section title={\"Please leave feedback\"}>\n        <FeedbackOptions\n          onLeaveGoodFeedback={onLeaveGoodFeedback}\n          onLeaveNeutralFeedback={onLeaveNeutralFeedback}\n          onLeaveBadFeedback={onLeaveBadFeedback}\n        />\n      </Section>\n      <Section title={\"Statistics\"}>\n        {!total ? (\n          <Notification message={\"No feedback given\"} />\n        ) : (\n          <Statistics\n            good={good}\n            neutral={neutral}\n            bad={bad}\n            total={total}\n            positivePercentage={percentage}\n          />\n        )}\n      </Section>\n    </>\n  );\n};\n\nexport default App;\n\n// class App extends Component {\n//   state = {\n//     good: 0,\n//     neutral: 0,\n//     bad: 0,\n//   };\n\n//   onLeaveFeedback = (type) => {\n//     this.setState((prevState) => ({\n//       [type]: prevState[type] + 1,\n//     }));\n//   };\n\n//   countTotalFeedback = () => {\n//     return this.state.good + this.state.neutral + this.state.bad;\n//   };\n\n//   countPositiveFeedbackPercentage = () => {\n//     const total = this.countTotalFeedback();\n//     if (!total) return 0;\n//     return Math.floor((this.state.good / total) * 100);\n//   };\n\n//   render() {\n//     const total = this.countTotalFeedback();\n//     const percentage = this.countPositiveFeedbackPercentage();\n//     return (\n//       <>\n//         <Section title={\"Please leave feedback\"}>\n//           <FeedbackOptions onLeaveFeedback={this.onLeaveFeedback} />\n//         </Section>\n//         <Section title={\"Statistics\"}>\n//           {!total ? (\n//             <Notification message={\"No feedback given\"} />\n//           ) : (\n//             <Statistics\n//               good={this.state.good}\n//               neutral={this.state.neutral}\n//               bad={this.state.bad}\n//               total={total}\n//               positivePercentage={percentage}\n//             />\n//           )}\n//         </Section>\n//       </>\n//     );\n//   }\n// }\n\n// export default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}